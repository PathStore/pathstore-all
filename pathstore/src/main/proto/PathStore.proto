syntax = "proto3";

import "google/protobuf/empty.proto";
option java_multiple_files = false;
option java_package = "pathstore.grpc";
option java_outer_classname = "pathStoreProto";
option objc_class_prefix = "PSP";

package pathstore;

service CommonService{
  // add entry to parent (non - covered cache miss occurred)
  rpc updateCache(QueryEntry) returns(InfoFromServer);
}

service ClientOnlyService{
  // called on client to local node after a session was deemed to be invalid
  rpc validateSession(ValidateSessionRequest) returns (ValidateSessionResponse);

  // called by client in ps properties to get local node id for validity
  rpc getLocalNodeInfo(google.protobuf.Empty) returns (GetLocalNodeResponse);

  // called by client in ps properties to get application lease information
  rpc getApplicationLeaseInformation(GetApplicationLeaseRequest) returns (GetApplicationLeaseResponse);
}

service ServerOnlyService{
  // called by pull server every delta t
  rpc createQueryDelta(QueryDeltaEntry) returns (UUIDInfo);

  // called by local node in validateSession to itself up to lca to sync caches
  rpc forceSynchronize(ForceSynchronizationRequest) returns (google.protobuf.Empty);
}

service NetworkWideService{
  // called by local node in validateSession to source node of session to lca
  rpc forcePush(ForcePushRequest) returns (google.protobuf.Empty);
}

service UnAuthenticatedService{
  // called on client to local node on initial connection to register connection
  rpc registerApplicationClient(RegisterApplicationRequest) returns (RegisterApplicationResponse);
}

message QueryEntry{
  string keyspace = 1;
  string table = 2;
  // list of clauses
  bytes clauses = 3;
  int32 limit = 4;
}

message InfoFromServer{
  string info = 1;
}

message QueryDeltaEntry{
  string keyspace = 1;
  string table = 2;
  // list of clauses
  bytes clauses = 3;
  string parentTimestamp = 4;
  int32 nodeID = 5;
  int32 limit = 6;
}

message UUIDInfo{
  string uuid = 1;
}

message RegisterApplicationRequest{
  string applicationName = 1;
  string password = 2;
}

message RegisterApplicationResponse{
  // json string
  string credentials = 1;
  // SchemaInfo Object
  SchemaInfo schemaInfo = 2;

  message SchemaInfo{
    repeated string keyspacesLoaded = 1;
    map<string, TableNameToTable> tableMap = 2;
    map<string, TableNameToColumns> columnInfo = 3;
    map<string, TableNameToPartitionColumnNames> partitionColumnNames = 4;
    map<string, TableNameToClusterColumnNames> clusterColumnNames = 5;
    map<string, TableNameToIndexes> indexInfo = 6;
    map<string, Types> typeInfo = 7;
  }

  // all for table map

  message TableNameToTable{
    map<string, Table> tableNameToTable = 1;
  }

  // note that we don't include the rest of the data as it is not needed for the client
  message Table{
    string keyspaceName = 1;
    string tableName = 2;
  }

  // all for column info

  message TableNameToColumns{
    map<string, Columns> tableToColumns = 1;
  }

  message Columns {
    repeated Column columns = 1;
  }

  message Column{
    string keyspaceName = 1;
    string tableName = 2;
    string columnName = 3;
    string clusteringOrder = 4;
    string kind = 5;
    int32 position = 6;
    string type = 7;
  }

  // all for partitionColumn Names

  message TableNameToPartitionColumnNames{
    map<string, PartitionColumnNames> tableNameToPartitionColumnNames = 1;
  }

  message PartitionColumnNames{
    repeated string partitionColumnName = 1;
  }

  // all for clusterColumn Names

  message TableNameToClusterColumnNames{
    map<string, ClusterColumnNames> tableNameToClusterColumnNames = 1;
  }

  message ClusterColumnNames{
    repeated string clusterColumnName = 1;
  }


  // all for index info

  message TableNameToIndexes{
    map<string, Indexes> tableNameToIndexes = 1;
  }

  message Indexes {
    repeated Index index = 1;
  }

  message Index{
    string keyspaceName = 1;
    string tableName = 2;
    string indexName = 3;
    string kind = 4;
    map<string, string> options = 5;
  }

  // all for type info

  message Types{
    repeated Type type = 1;
  }

  message Type{
    string keyspaceName = 1;
    string typeName = 2;
    repeated string fieldNames = 3;
    repeated string fileTypes = 4;
  }
}

enum Status{
  PENDING = 0;
  DONE = 1;
}

message ValidateSessionRequest{
  // SessionToken Object
  bytes sessionToken = 1;
}

message ValidateSessionResponse{
  bool response = 1;
}

message ForcePushRequest{
  // SessionToken Object
  bytes sessionToken = 1;
  int32 lca = 2;
}

message ForceSynchronizationRequest{
  // SessionToken Object
  bytes sessionToken = 1;
  int32 lca = 2;
}

message GetLocalNodeResponse{
  // LocalNodeInfo object
  bytes infoPayload = 1;
}

message GetApplicationLeaseRequest{
  // Name of Application
  string applicationName = 1;
}

message GetApplicationLeaseResponse{
  // CLT
  int32 clientLeaseTime = 1;
}