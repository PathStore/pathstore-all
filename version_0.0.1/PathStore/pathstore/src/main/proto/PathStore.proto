syntax = "proto3";

import "google/protobuf/empty.proto";
option java_multiple_files = false;
option java_package = "pathstore.grpc";
option java_outer_classname = "pathStoreProto";
option objc_class_prefix = "PSP";

package pathstore;

// TODO: auth
// TODO: segregate functions into separate hidden services (force anything should not be public)
service PathStoreService{

  // add entry to parent (non - covered cache miss occured)
  rpc updateCache(QueryEntry) returns(InfoFromServer);

  // called by pull server every delta t
  rpc createQueryDelta(QueryDeltaEntry) returns (UUIDInfo);

  // called on client to local node on initial connection to register connection
  rpc registerApplicationClient(RegisterApplicationRequest) returns (RegisterApplicationResponse);

  // called on client to local node after connection is accepted to get schema for their application
  rpc getSchemaInfo(SchemaInfoRequest) returns (SchemaInfoResponse);

  // called on client to local node after a session was deemed to be invalid
  rpc validateSession(ValidateSessionRequest) returns (ValidateSessionResponse);

  // called by local node in validateSession to source node of session to lca
  rpc forcePush(ForcePushRequest) returns (google.protobuf.Empty);

  // called by local node in validateSession to itself up to lca to sync caches
  rpc forceSynchronize(ForceSynchronizationRequest) returns (google.protobuf.Empty);

  // called by client in ps properties to get local node id for validity
  rpc getLocalNodeId(google.protobuf.Empty) returns (GetLocalNodeResponse);

}

message QueryEntry{
  string keyspace = 1;
  string table = 2;
  // list of clauses
  bytes clauses = 3;
  int32 limit = 4;
}

message InfoFromServer{
  string info = 1;
}

message QueryDeltaEntry{
  string keyspace = 1;
  string table = 2;
  // list of clauses
  bytes clauses = 3;
  string parentTimestamp = 4;
  int32 nodeID = 5;
  int32 limit = 6;
}

message UUIDInfo{
  string uuid = 1;
}

message RegisterApplicationRequest{
  string applicationName = 1;
  string password = 2;
}

message RegisterApplicationResponse{
  // json string
  string response = 1;
}

message SchemaInfoRequest{
  string keyspace = 1;
}

message SchemaInfoResponse{
  // SchemaInfo Object
  bytes response = 1;
}

message ValidateSessionRequest{
  // SessionToken Object
  bytes sessionToken = 1;
}

message ValidateSessionResponse{
  bool response = 1;
}

message ForcePushRequest{
  // SessionToken Object
  bytes sessionToken = 1;
  int32 lca = 2;
}

message ForceSynchronizationRequest{
  // SessionToken Object
  bytes sessionToken = 1;
  int32 lca = 2;
}

message GetLocalNodeResponse{
  int32 node = 1;
}